package com.blair.urlhaus.service;

import com.blair.urlhaus.domain.MalwareUrl;
import com.blair.urlhaus.domain.MalwareUrlDistance;
import com.blair.urlhaus.repository.MalwareUrlRepository;
import com.blair.urlhaus.util.MalwareUrlUtil;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.math.BigDecimal;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class MalwareUrlServiceTest {
    @Mock
    private MalwareUrlRepository malwareUrlRepository;

    @InjectMocks
    private MalwareUrlService malwareUrlService;

    @Test
    public void get() {
        MalwareUrl malwareUrl = MalwareUrlUtil.buildMalwareUrl(1);
        when(malwareUrlRepository.get(20, 0)).thenReturn(Collections.singletonList(malwareUrl));

        List<MalwareUrl> results = malwareUrlService.get(0, 20);

        assertThat(results).containsOnly(malwareUrl);
    }

    @Test
    public void searchByTag() {
        List<MalwareUrl> malwareUrls = Collections.singletonList(MalwareUrlUtil.buildMalwareUrl(1));
        String tag = "tag";
        when(malwareUrlRepository.searchByTag(tag, 20, 0)).thenReturn(malwareUrls);

        List<MalwareUrl> results = malwareUrlService.searchByTag(tag, 0, 20);

        assertThat(results).isEqualTo(malwareUrls);
    }

    @Test
    public void findNearestNeighbors() {
        MalwareUrl malwareUrl = MalwareUrlUtil.buildMalwareUrl(1);
        BigDecimal distance = new BigDecimal("1");
        BigDecimal latitude = new BigDecimal("2");
        BigDecimal longitude = new BigDecimal("3");
        List<MalwareUrlDistance> malwareUrls = Collections.singletonList(MalwareUrlDistance.fromMalwareUrl(malwareUrl, distance));
        when(malwareUrlRepository.findNearestNeighbors(latitude, longitude, 20, 20)).thenReturn(malwareUrls);

        List<MalwareUrlDistance> results = malwareUrlService.findNearestNeighbors(longitude, latitude, 1, 20);

        assertThat(results).isEqualTo(malwareUrls);
    }
}