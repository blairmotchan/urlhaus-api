package com.blair.urlhaus.repository;

import com.blair.urlhaus.AbstractIntegrationTest;
import com.blair.urlhaus.domain.MalwareUrl;
import com.blair.urlhaus.util.MalwareUrlUtil;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;

import static java.util.Arrays.asList;
import static org.assertj.core.api.Assertions.assertThat;

public class MalwareUrlRepositoryTest extends AbstractIntegrationTest {
    @Autowired
    private MalwareUrlRepository malwareUrlRepository;

    @Test
    public void insert_when_no_latitude_expect_no_location_data() {
        malwareUrlRepository.insert(
                asList(
                        MalwareUrlUtil.buildMalwareUrl(1)
                )
        );

        List<MalwareUrl> results = malwareUrlRepository.get(1, 0);

        assertThat(results.get(0).getLatitude()).isNull();
    }

    @Test
    public void insert_when_latitude_expect_location_data() {
        Double longitude = Double.valueOf("38.889588");
        Double latitude = Double.valueOf("-77.0092");
        malwareUrlRepository.insert(
                asList(
                        MalwareUrlUtil.buildMalwareUrl(1, "country", "city", longitude, latitude)
                )
        );

        List<MalwareUrl> results = malwareUrlRepository.get(1, 0);

        assertThat(results.get(0).getLongitude()).isEqualTo(longitude);
        assertThat(results.get(0).getLatitude()).isEqualTo(latitude);
    }

    @Test
    public void get_expect_limit_and_offset() {
        malwareUrlRepository.insert(
                asList(
                        MalwareUrlUtil.buildMalwareUrl(1),
                        MalwareUrlUtil.buildMalwareUrl(2),
                        MalwareUrlUtil.buildMalwareUrl(3)
                )
        );

        List<MalwareUrl> results = malwareUrlRepository.get(1, 1);

        assertThat(results).hasSize(1);
        assertThat(results.get(0).getUrl()).isEqualTo("url2");
    }

    @Test
    public void getTotalCount() {
        malwareUrlRepository.insert(
                asList(
                        MalwareUrlUtil.buildMalwareUrl(1),
                        MalwareUrlUtil.buildMalwareUrl(2)
                )
        );

        long totalCount = malwareUrlRepository.getTotalCount();

        assertThat(totalCount).isEqualTo(2);
    }

    @Test
    public void searchByTag() throws JsonProcessingException {
        malwareUrlRepository.insert(
                asList(
                        MalwareUrlUtil.buildMalwareUrl(1),
                        MalwareUrlUtil.buildMalwareUrl(2)
                )
        );

        List<MalwareUrl> results = malwareUrlRepository.searchByTag("tag", 20, 0);

        assertThat(results).hasSize(2);
    }

    @Test
    public void findNearestNeighbor() {
        Double sanFranciscoLongitude = Double.parseDouble("-122.431297");
        Double sanFranciscoLatitude = Double.parseDouble("37.773972");
        malwareUrlRepository.insert(
                asList(
                        MalwareUrlUtil.buildMalwareUrl(1, "USA", "St. Louis", Double.valueOf("-90.199402"), Double.valueOf("38.627003")),
                        MalwareUrlUtil.buildMalwareUrl(2, "USA", "Chicago", Double.valueOf("-87.623177"), Double.valueOf("41.881832"))
                )
        );

        List<MalwareUrl> results = malwareUrlRepository.findNearestNeighbors(sanFranciscoLatitude, sanFranciscoLongitude, 20, 0);

        assertThat(results.get(0).getId()).isEqualTo(1);
        assertThat(results.get(1).getId()).isEqualTo(2);
    }
}