package com.blair.urlhaus.repository;

import com.blair.urlhaus.AbstractIntegrationTest;
import com.blair.urlhaus.domain.MalwareUrl;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.sql.DataSource;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

public class MalwareUrlRepositoryTest extends AbstractIntegrationTest {
    @Autowired
    private MalwareUrlRepository malwareUrlRepository;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private DataSource dataSource;

    private NamedParameterJdbcTemplate jdbcTemplate;

    @BeforeEach
    public void setUp() {
        jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
    }

    @Test
    public void get() throws JsonProcessingException {
        MalwareUrl expected = new MalwareUrl(
                1,
                LocalDateTime.now(),
                "url",
                "urlStatus",
                "live",
                Arrays.asList("tag", "tag2"),
                "urlHausLink",
                "reporter"
        );
        insertTestRow(expected);

        List<MalwareUrl> results = malwareUrlRepository.get(1, 0);

        assertThat(results).hasSize(1);
        assertThat(results.get(0).getId()).isEqualTo(1);
    }

    private void insertTestRow(MalwareUrl malwareUrl) throws JsonProcessingException {
        MapSqlParameterSource sps = new MapSqlParameterSource()
                .addValue("id", malwareUrl.getId())
                .addValue("dateAdded", malwareUrl.getDateAdded())
                .addValue("url", malwareUrl.getUrl())
                .addValue("urlStatus", malwareUrl.getUrlStatus())
                .addValue("threat", malwareUrl.getThreat())
                .addValue("tags", objectMapper.writeValueAsString(malwareUrl.getTags()))
                .addValue("urlHausLink", malwareUrl.getUrlHausLink())
                .addValue("reporter", malwareUrl.getReporter());

        jdbcTemplate.update(INSERT, sps);
    }

    private static final String INSERT =
            "INSERT INTO url_haus.url_entry (date_added, url, url_status, threat, tags, url_haus_link, reporter) " +
                    "VALUES (:dateAdded, :url, :urlStatus, :threat, :tags::JSONB, :urlHausLink, :reporter)";
}