package com.blair.urlhaus.controller;

import com.blair.urlhaus.AbstractIntegrationTest;
import com.blair.urlhaus.domain.MalwareUrl;
import com.blair.urlhaus.repository.MalwareUrlRepository;
import com.blair.urlhaus.util.MalwareUrlUtil;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.assertj.core.api.Assert;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.IntStream;

import static java.util.Arrays.asList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@AutoConfigureMockMvc
class MalwareUrlControllerIntegrationTest extends AbstractIntegrationTest {
    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private MalwareUrlRepository malwareUrlRepository;

    @Test
    public void get() throws Exception {
        List<MalwareUrl> urls = asList(
                MalwareUrlUtil.buildMalwareUrl(1),
                MalwareUrlUtil.buildMalwareUrl(2),
                MalwareUrlUtil.buildMalwareUrl(3)
        );
        malwareUrlRepository.insert(urls);

        ResultActions resultActions = mockMvc.perform(MockMvcRequestBuilders.get("/malware-urls/v1")
                .queryParam("size", "1"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.length()").value(1));

        compareMalwareUrl(resultActions, urls.get(0), 0);

        resultActions = mockMvc.perform(MockMvcRequestBuilders.get("/malware-urls/v1")
                .queryParam("size", "1")
                .queryParam("page", "1")
        )
                .andExpect(jsonPath("$.length()").value(1));

        compareMalwareUrl(resultActions, urls.get(1), 0);
    }

    @Test
    public void searchByTag() throws Exception {
        List<MalwareUrl> urls = asList(
                MalwareUrlUtil.buildMalwareUrl(1),
                MalwareUrlUtil.buildMalwareUrl(2)
        );
        malwareUrlRepository.insert(urls);

        ResultActions resultActions = mockMvc.perform(MockMvcRequestBuilders.get("/malware-urls/v1/tag")
                .queryParam("tag", urls.get(1).getTags().get(1)))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.length()").value(1));

        compareMalwareUrl(resultActions, urls.get(1), 0);
    }

    @Test
    public void findNearestNeighbors() throws Exception {
        String stLouisLongitude = "-90.199402";
        String stLouisLatitude = "38.627003";
        List<MalwareUrl> urls = asList(
                MalwareUrlUtil.buildMalwareUrl(1, "USA", "Chicago", Double.valueOf("-87.623177"), Double.valueOf("41.881832")),
                MalwareUrlUtil.buildMalwareUrl(2, "USA", "New York City", Double.valueOf("-74.006058"), Double.valueOf("40.712772"))
        );
        malwareUrlRepository.insert(urls);

        ResultActions resultActions = mockMvc.perform(MockMvcRequestBuilders.get("/malware-urls/v1/nearest-neighbors")
                .queryParam("longitude", stLouisLongitude)
                .queryParam("latitude", stLouisLatitude))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.length()").value(2));

//      distance verified from https://www.distancefromto.net/
        compareMalwareUrl(resultActions, urls.get(0), 0);
        resultActions.andExpect(jsonPath("$[0].distanceMeters").value(Double.parseDouble("409996.5807619592")));
        compareMalwareUrl(resultActions, urls.get(1), 1);
        resultActions.andExpect(jsonPath("$[1].distanceMeters").value(Double.parseDouble("1350708.4215895643")));
    }

    private void compareMalwareUrl(ResultActions resultActions, MalwareUrl malwareUrl, int index) throws Exception {
        resultActions
                .andExpect(jsonPath("$[" + index + "].id").value(malwareUrl.getId()))
                .andExpect(jsonPath("$[" + index + "].dateAdded").value(malwareUrl.getDateAdded().format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"))))
                .andExpect(jsonPath("$[" + index + "].url").value(malwareUrl.getUrl()))
                .andExpect(jsonPath("$[" + index + "].urlStatus").value(malwareUrl.getUrlStatus()))
                .andExpect(jsonPath("$[" + index + "].threat").value(malwareUrl.getThreat()))
                .andExpect(jsonPath("$[" + index + "].city").value(malwareUrl.getCity()))
                .andExpect(jsonPath("$[" + index + "].country").value(malwareUrl.getCountry()))
                .andExpect(jsonPath("$[" + index + "].latitude").value(malwareUrl.getLatitude()))
                .andExpect(jsonPath("$[" + index + "].longitude").value(malwareUrl.getLongitude()));

        IntStream.range(0, malwareUrl.getTags().size()).forEach(i -> validateTag(malwareUrl.getTags().get(i), index, i, resultActions));
    }

    private void validateTag(String tag, int resultIndex, int tagIndex, ResultActions resultActions) {
        try {
            resultActions.andExpect(jsonPath("$[" + resultIndex + "].tags[" + tagIndex + "]").value(tag));
        } catch (Exception e) {

        }
    }
}