package com.blair.urlhaus.repository;

import com.blair.urlhaus.domain.MalwareUrl;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;

@Repository
public class MalwareUrlRepository {
    private NamedParameterJdbcTemplate jdbcTemplate;
    private ObjectMapper objectMapper;

    public MalwareUrlRepository(DataSource dataSource, ObjectMapper objectMapper) {
        jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
        this.objectMapper = objectMapper;
    }

    public List<MalwareUrl> get(int limit, long offset) {
        MapSqlParameterSource sps = new MapSqlParameterSource()
                .addValue("limit", limit)
                .addValue("offset", offset);

        return jdbcTemplate.query(GET, sps, this::mapRow);
    }

    public long getTotalCount() {
        return jdbcTemplate.queryForObject(COUNT, new MapSqlParameterSource(), long.class);
    }

    public void insert(List<MalwareUrl> malwareUrls) {
        List<SqlParameterSource> sps = malwareUrls.stream()
                .map(this::getSpsFromMalwareUrl)
                .collect(Collectors.toList());
        jdbcTemplate.batchUpdate(INSERT, sps.toArray(new SqlParameterSource[0]));
    }

    private SqlParameterSource getSpsFromMalwareUrl(MalwareUrl malwareUrl) {
        try {
            return new MapSqlParameterSource()
                    .addValue("id", malwareUrl.getId())
                    .addValue("dateAdded", malwareUrl.getDateAdded())
                    .addValue("url", malwareUrl.getUrl())
                    .addValue("urlStatus", malwareUrl.getUrlStatus())
                    .addValue("threat", malwareUrl.getThreat())
                    .addValue("tags", objectMapper.writeValueAsString(malwareUrl.getTags()))
                    .addValue("urlHausLink", malwareUrl.getUrlHausLink())
                    .addValue("reporter", malwareUrl.getReporter());
        } catch (JsonProcessingException jpe) {
            throw new RuntimeException();
        }
    }

    private MalwareUrl mapRow(ResultSet resultSet, int i) throws SQLException {
        try {
            return new MalwareUrl(
                    resultSet.getInt("id"),
                    LocalDateTime.parse(resultSet.getString("date_added"), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")),
                    resultSet.getString("url"),
                    resultSet.getString("url_status"),
                    resultSet.getString("threat"),
                    objectMapper.readValue(resultSet.getString("tags"), new TypeReference<>() {
                    }),
                    resultSet.getString("url_haus_link"),
                    resultSet.getString("reporter")
            );
        } catch (JsonProcessingException jpe) {
            throw new RuntimeException();
        }
    }

    private static final String COUNT =
            "SELECT COUNT(*) FROM url_haus.url_entry";

    private static final String GET =
            "SELECT id, TO_CHAR(date_added, 'YYYY-MM-DD HH:MI:SS') AS date_added, url, url_status, threat, tags, url_haus_link, reporter " +
                    "FROM url_haus.url_entry " +
                    "ORDER BY date_added DESC " +
                    "LIMIT :limit OFFSET :offset";

    private static final String INSERT =
            "INSERT INTO url_haus.url_entry (date_added, url, url_status, threat, tags, url_haus_link, reporter) " +
                    "VALUES (:dateAdded, :url, :urlStatus, :threat, :tags::JSONB, :urlHausLink, :reporter)";
}
