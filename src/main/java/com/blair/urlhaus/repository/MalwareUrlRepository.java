package com.blair.urlhaus.repository;

import com.blair.urlhaus.domain.MalwareUrl;
import com.blair.urlhaus.domain.MalwareUrlDistance;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Repository
public class MalwareUrlRepository {
    private NamedParameterJdbcTemplate jdbcTemplate;
    private ObjectMapper objectMapper;

    public MalwareUrlRepository(DataSource dataSource, ObjectMapper objectMapper) {
        jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
        this.objectMapper = objectMapper;
    }

    public List<MalwareUrl> get(int limit, long offset) {
        MapSqlParameterSource sps = new MapSqlParameterSource()
                .addValue("limit", limit)
                .addValue("offset", offset);

        return jdbcTemplate.query(GET, sps, this::mapRow);
    }

    public int getTotalCount() {
        return jdbcTemplate.queryForObject(COUNT, new MapSqlParameterSource(), int.class);
    }

    public void insert(List<MalwareUrl> malwareUrls) {
        Map<Boolean, List<MalwareUrl>> split =
                malwareUrls.stream().collect(Collectors.partitioningBy(n -> n.getLatitude() != null));

        insert(split.get(true), INSERT_GEOG);
        insert(split.get(false), INSERT);
    }

    private void insert(List<MalwareUrl> malwareUrls, String insertStatement) {
        List<SqlParameterSource> sps = malwareUrls.stream()
                .map(this::getSpsFromMalwareUrl)
                .collect(Collectors.toList());
        jdbcTemplate.batchUpdate(insertStatement, sps.toArray(new SqlParameterSource[0]));
    }

    public List<MalwareUrl> searchByTag(String tag, int limit, int offset) {
        String tagJson;
        try {
            tagJson = objectMapper.writeValueAsString(Collections.singletonList(tag));
        } catch (JsonProcessingException jpe) {
            throw new RuntimeException();
        }
        SqlParameterSource sps = new MapSqlParameterSource()
                .addValue("tag", tagJson)
                .addValue("limit", limit)
                .addValue("offset", offset);
        return jdbcTemplate.query(TAG_SEARCH, sps, this::mapRow);
    }

    public List<MalwareUrlDistance> findNearestNeighbors(Double latitude, Double longitude, int limit, int offset) {
        MapSqlParameterSource sps = new MapSqlParameterSource()
                .addValue("ewkt", "SRID=4326;POINT(" + longitude + " " + latitude + ")")
                .addValue("limit", limit)
                .addValue("offset", offset);
        return jdbcTemplate.query(NEAREST_NEIGHBOR_SEARCH, sps, this::mapDistanceRow);
    }

    private SqlParameterSource getSpsFromMalwareUrl(MalwareUrl malwareUrl) {
        try {
            return new MapSqlParameterSource()
                    .addValue("id", malwareUrl.getId())
                    .addValue("dateAdded", malwareUrl.getDateAdded())
                    .addValue("url", malwareUrl.getUrl())
                    .addValue("urlStatus", malwareUrl.getUrlStatus())
                    .addValue("threat", malwareUrl.getThreat())
                    .addValue("tags", objectMapper.writeValueAsString(malwareUrl.getTags()))
                    .addValue("urlHausLink", malwareUrl.getUrlHausLink())
                    .addValue("reporter", malwareUrl.getReporter())
                    .addValue("country", malwareUrl.getCountry())
                    .addValue("city", malwareUrl.getCity())
                    .addValue("ewkt", "SRID=4326;POINT(" + malwareUrl.getLongitude() + " " + malwareUrl.getLatitude() + ")")
                    .addValue("longitude", malwareUrl.getLongitude());
        } catch (JsonProcessingException jpe) {
            throw new RuntimeException();
        }
    }

    private MalwareUrl mapRow(ResultSet resultSet, int i) throws SQLException {
        try {
            return new MalwareUrl(
                    resultSet.getInt("id"),
                    LocalDateTime.parse(resultSet.getString("date_added"), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")),
                    resultSet.getString("url"),
                    resultSet.getString("url_status"),
                    resultSet.getString("threat"),
                    objectMapper.readValue(resultSet.getString("tags"), new TypeReference<>() {
                    }),
                    resultSet.getString("url_haus_link"),
                    resultSet.getString("reporter"),
                    resultSet.getString("country"),
                    resultSet.getString("city"),
                    resultSet.getString("latitude") != null ? Double.valueOf(resultSet.getString("latitude")) : null,
                    resultSet.getString("longitude") != null ? Double.valueOf(resultSet.getString("longitude")) : null
            );
        } catch (JsonProcessingException jpe) {
            throw new RuntimeException();
        }
    }

    private MalwareUrlDistance mapDistanceRow(ResultSet resultSet, int i) throws SQLException {
        MalwareUrl malwareUrl = mapRow(resultSet, i);
        return MalwareUrlDistance.fromMalwareUrl(malwareUrl, Double.valueOf(resultSet.getString("distance")));
    }

    private static final String COUNT =
            "SELECT COUNT(*) FROM url_haus.url_entry";

    private static final String SELECT_BASE = "SELECT id, TO_CHAR(date_added, 'YYYY-MM-DD HH:MI:SS') AS date_added, url, url_status, threat, tags, url_haus_link, reporter, country, city, ST_X(geog::geometry) AS longitude, ST_Y(geog::geometry) AS latitude ";

    private static final String LIMIT_OFFSET = "LIMIT :limit OFFSET :offset";

    private static final String GET =
            SELECT_BASE +
                    "FROM url_haus.url_entry " +
                    "ORDER BY date_added DESC " +
                    LIMIT_OFFSET;

    private static final String INSERT =
            "INSERT INTO url_haus.url_entry (id, date_added, url, url_status, threat, tags, url_haus_link, reporter) " +
                    "VALUES (:id, :dateAdded, :url, :urlStatus, :threat, :tags::JSONB, :urlHausLink, :reporter)";

    private static final String INSERT_GEOG =
            "INSERT INTO url_haus.url_entry (id, date_added, url, url_status, threat, tags, url_haus_link, reporter, country, city, geog) " +
                    "VALUES (:id, :dateAdded, :url, :urlStatus, :threat, :tags::JSONB, :urlHausLink, :reporter, :country, :city, :ewkt::geography)";

    private static final String TAG_SEARCH =
            SELECT_BASE +
                    "FROM url_haus.url_entry " +
                    "WHERE tags @> :tag::JSONB " +
                    LIMIT_OFFSET;

    private static final String NEAREST_NEIGHBOR_SEARCH =
            SELECT_BASE +
                    ", ST_Distance(" +
                    "   ST_Transform(geog::geometry, 3857), ST_TRANSFORM(:ewkt::geometry, 3857)" +
                    ") * cosd(42.3521) " +
                    "AS distance " +
                    "FROM url_haus.url_entry " +
                    "ORDER BY " +
                    "geog::geometry <-> :ewkt::geometry " +
                    LIMIT_OFFSET;
}
